# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

ARG NODE_VERSION=20.17.0

################################################################################
# Use node image for base image for all stages.
FROM node:${NODE_VERSION}-alpine AS base

# Set working directory for all build stages.
WORKDIR /usr/src/app

################################################################################
# Create a stage for installing production dependecies.
FROM base AS deps

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.npm to speed up subsequent builds.
# Leverage bind mounts to package.json and package-lock.json to avoid having to copy them
# into this layer.
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev

################################################################################
# Create a stage for building the application.
FROM deps AS build

# Define variables to be passed at build-time to the builder â€“ Vite
# @see: https://vitejs.dev/guide/env-and-mode.html#env-files: "environment
# variables that already exist when Vite is executed have the highest
# priority and will not be overwritten by `.env` files."
# @see: https://stackoverflow.com/questions/77486735/docker-with-vite-env-variables-are-undefined-inside-the-docker-container
# Potential improvement: https://docs.docker.com/reference/dockerfile/#arg
ARG VITE_APP_NAME
ARG VITE_BASE_URL

# Load Vite environment variables from the `compose.yaml`'s `build.args`
# into the build stage
ENV VITE_APP_NAME=$VITE_APP_NAME
ENV VITE_BASE_URL=$VITE_BASE_URL

# Download additional development dependencies before building, as some projects require
# "devDependencies" to be installed to build. If you don't need this, remove this step.
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci

# Copy the rest of the source files into the image.
COPY . .

# Run the build script and output to `/usr/src/app/dist` (`WORKDIR
# /usr/src/app`)
RUN npm run build

################################################################################
# The `client` service builds static files using Vite and outputs them
# to a shared volume named `vite-build`. The `caddy` service serves
# these static files from this volume, maintaining a separate and
# efficient build process. The `client` service is configured to only
# build static files and does not run a development or preview server.
# The Caddy Dockerfile does not include a build stage, relying on the
# shared volume to access the built files.
